{"version":3,"sources":["utils/lib.js","components/Search.js","components/NavigationBar.js","components/HighlightDiv.js","components/Note.js","components/NoteList.js","components/Routine.js","components/RoutineList.js","components/Todo.js","components/TodoList.js","models/Note.js","utils/autoSave.js","utils/seedData.js","stores/NoteStore.js","models/Routine.js","stores/RoutineStore.js","models/Todo.js","stores/TodoStore.js","App.js","registerServiceWorker.js","index.js"],"names":["lib_Lib","momentDate","format","Lib","dateFormat","type","shortid_default","a","generate","lib","Search_Search","onSearchSelection","selection","Object","es","navigate","date","concat","_id","_this2","this","_this$props","props","todoStore","noteStore","searchItems","todosWithDates","notesWithDates","react_default","createElement","downshift_esm","onChange","itemToString","item","_ref","getInputProps","getItemProps","getMenuProps","getLabelProps","isOpen","inputValue","highlightedIndex","selectedItem","dist","assign","borderColor","bg","borderRadius","placeholder","boxShadow","className","filter","content","toLowerCase","includes","map","index","key","style","backgroundColor","children","fontSize","react","components_Search","index_module","NavigationBar_NavigationBar","state","currentTime","moment_default","onDateChange","plannerDate","saveableDateFormat","tick","_this","setState","isDayHighlighted","day","formattedDate","todoDates","noteDates","findIndex","interval","setInterval","clearInterval","_this3","_this$props2","todayDate","flexWrap","justifyContent","alignItems","p","mb","width","to","my","react_dates","focused","onFocusChange","id","small","readOnly","isOutsideRange","orientation","components_NavigationBar","highlight","styled_components_browser_es","_templateObject","components_HighlightDiv","div","_templateObject2","Note_Note","Note","Note_classCallCheck","Note_possibleConstructorReturn","Note_getPrototypeOf","call","removeNote","note","setContent","e","target","value","contentEditableRef","createRef","isSelected","current","htmlEl","focus","w","mx","react_contenteditable_default","html","disabled","ref","py","px","color","onClick","components_Note","NoteList_NoteList","addNote","listHeading","Header","borderBottom","flexwrap","fontWeight","textAlign","react_transition_group","notes","timeout","classNames","components_NoteList","Routine_Routine","Routine","Routine_classCallCheck","Routine_possibleConstructorReturn","Routine_getPrototypeOf","removeRoutine","routine","increaseFrequency","decreaseFrequency","completionChange","i","setTitle","isCompletionChecked","result","entries","completed","forEach","_slicedToArray","isMonthly","isSameOrAfter","startOf","isSameOrBefore","endOf","title","mt","_toConsumableArray","Array","frequency","x","checked","components_Routine","RoutineList_RoutineList","addRoutine","routineStore","routines","components_RoutineList","Todo_Todo","Todo","Todo_classCallCheck","Todo_possibleConstructorReturn","Todo_getPrototypeOf","removeTodo","todo","toggleCompleted","removeDate","setDate","isBacklog","components_Todo","TodoList_TodoList","addTodo","todos","components_TodoList","models_Note_Note","models_Note_classCallCheck","models_Note","mobx_module","localforage_default","config","name","autoSave","firstRun","keyWithPrefix","getItem","then","existingStore","store","formattedTodayDate","startsWith","setRoutineType","routineType","hydrate","generateID","_defineProperty","catch","err","setItem","NoteStore_NoteStore","NoteStore","NoteStore_classCallCheck","arguments","length","undefined","push","stores_NoteStore","models_Routine_Routine","models_Routine_classCallCheck","Routine_slicedToArray","_ref3","pop","formattedDateKey","Routine_toConsumableArray","models_Routine","RoutineStore_RoutineStore","RoutineStore","RoutineStore_classCallCheck","stores_RoutineStore","models_Todo_Todo","models_Todo_classCallCheck","models_Todo","TodoStore_TodoStore","TodoStore","TodoStore_classCallCheck","stores_TodoStore","App_templateObject","monthlyRoutineStore","weeklyRoutineStore","App_todoStore","App_noteStore","App_App","location","search","split","inputDate","isValid","prefixDate","theme","fonts","sans","src_App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","src_AppContainer","componentDidMount","pathname","path","react_dom_default","render","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.564bbe0b.chunk.js","sourcesContent":["import shortid from \"shortid\";\n\nclass Lib {\n  static dateFormat = \"YYYY-MM-DD\";\n\n  static saveableDateFormat(momentDate) {\n    return momentDate.format(Lib.dateFormat);\n  }\n\n  static generateID(type) {\n    return type + \"_\" + shortid.generate();\n  }\n}\n\nexport default Lib;\n","import { navigate } from \"@reach/router\";\nimport Downshift from \"downshift\";\nimport { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport * as Rebass from \"rebass\";\n\nclass Search extends Component {\n  onSearchSelection = selection => {\n    navigate(`/${selection.date}?selectedItemId=${selection._id}`);\n  };\n\n  render() {\n    const { todoStore, noteStore } = this.props;\n    let searchItems = todoStore.todosWithDates.concat(noteStore.notesWithDates);\n    return (\n      <Downshift\n        onChange={selection => this.onSearchSelection(selection)}\n        itemToString={item => \"\"}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          getLabelProps,\n          getMenuProps,\n          isOpen,\n          inputValue,\n          highlightedIndex,\n          selectedItem\n        }) => (\n          <div>\n            <Rebass.Input\n              {...getInputProps()}\n              type=\"search\"\n              borderColor=\"black\"\n              bg=\"white\"\n              borderRadius={0}\n              placeholder=\"Search...\"\n              boxShadow={0}\n            />\n            <dl {...getMenuProps()} className=\"searchDropdownContainer\">\n              {isOpen\n                ? searchItems\n                    .filter(\n                      item =>\n                        !inputValue ||\n                        item.content\n                          .toLowerCase()\n                          .includes(inputValue.toLowerCase())\n                    )\n                    .map((item, index) => (\n                      <dt\n                        className=\"searchResult\"\n                        {...getItemProps({\n                          key: item._id,\n                          index,\n                          item,\n                          style: {\n                            backgroundColor:\n                              highlightedIndex === index ? \"lightgray\" : \"white\"\n                          }\n                        })}\n                      >\n                        <Rebass.Text children={item.date} fontSize={2} />\n                        {item.content}\n                      </dt>\n                    ))\n                : null}\n            </dl>\n          </div>\n        )}\n      </Downshift>\n    );\n  }\n}\n\nexport default observer(Search);\n","import { Link, navigate } from \"@reach/router\";\nimport { observer } from \"mobx-react\";\nimport moment from \"moment\";\nimport React, { Component } from \"react\";\nimport { SingleDatePicker } from \"react-dates\";\nimport \"react-dates/initialize\";\nimport \"react-dates/lib/css/_datepicker.css\";\nimport * as Rebass from \"rebass\";\nimport Lib from \"./../utils/lib.js\";\nimport Search from \"./Search.js\";\n\nclass NavigationBar extends Component {\n  state = {\n    currentTime: moment()\n  };\n\n  onDateChange = plannerDate => {\n    navigate(`/${Lib.saveableDateFormat(plannerDate)}`);\n  };\n\n  tick = () => {\n    this.setState({\n      currentTime: moment()\n    });\n  };\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 10000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  isDayHighlighted = day => {\n    const { todoStore, noteStore } = this.props;\n    const formattedDate = Lib.saveableDateFormat(day);\n    const allDates = todoStore.todoDates.concat(noteStore.noteDates);\n    return (\n      allDates.findIndex(date => {\n        return date === formattedDate;\n      }) !== -1\n    );\n  };\n\n  render() {\n    const { plannerDate, todayDate, todoStore, noteStore } = this.props;\n    return (\n      <Rebass.Flex\n        flexWrap=\"wrap\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        p={2}\n        mb={1}\n        bg=\"gray\"\n      >\n        <Rebass.Box width={[1, 15 / 100]}>\n          <Rebass.Flex flexWrap=\"wrap\" justifyContent=\"space-around\">\n            <Rebass.Box width={[1, 1 / 5]}>\n              <Link to={todayDate} className=\"todayLink\">\n                Today:\n              </Link>\n            </Rebass.Box>\n            <Rebass.Box width={[1, 4 / 5]}>\n              <Rebass.Text my={0}>\n                {this.state.currentTime.format(\"MM/DD/YY h:mm a\")}\n              </Rebass.Text>\n            </Rebass.Box>\n          </Rebass.Flex>\n        </Rebass.Box>\n        <Rebass.Box width={[1, 10 / 100]}>\n          <SingleDatePicker\n            date={plannerDate} // momentPropTypes.momentObj or null\n            onDateChange={this.onDateChange} // PropTypes.func.isRequired\n            focused={this.state.focused} // PropTypes.bool\n            onFocusChange={({ focused }) => this.setState({ focused })} // PropTypes.func.isRequired\n            id=\"single_date_picker\" // PropTypes.string.isRequired,\n            small={true}\n            readOnly={true}\n            isOutsideRange={() => false}\n            orientation=\"vertical\"\n            isDayHighlighted={day => this.isDayHighlighted(day)}\n          />\n        </Rebass.Box>\n        <Rebass.Box width={[1, 10 / 100]}>\n          <Search todoStore={todoStore} noteStore={noteStore} />\n        </Rebass.Box>\n      </Rebass.Flex>\n    );\n  }\n}\n\nexport default observer(NavigationBar);\n","import styled, { keyframes } from \"styled-components\";\n\nconst highlight = keyframes`\n  0% {\n    background-color: rgb(255, 255, 255);\n  }\n  10% {\n    background-color: rgb(255, 255, 255);\n  }\n  20% {\n    background-color: rgb(255, 250, 205);\n  }\n  30% {\n    background-color: rgb(255, 255, 255);\n  }\n  40% {\n    background-color: rgb(255, 255, 255);\n  }\n  50% {\n    background-color: rgb(255, 250, 205);\n  }\n  100% {\n    background-color: rgb(255, 255, 255);\n  }\n`;\n\nconst HighlightDiv = styled.div`\n  animation: 2s ${highlight} ease-out;\n`;\n\nexport default HighlightDiv;\n","import { observer } from \"mobx-react\";\nimport React, { Component, Fragment } from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport * as Rebass from \"rebass\";\nimport HighlightDiv from \"./HighlightDiv.js\";\n\nclass Note extends Component {\n  constructor(props) {\n    super(props);\n    this.contentEditableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { isSelected, note } = this.props;\n    if (isSelected || note.content === \"\") {\n      this.contentEditableRef.current.htmlEl.focus();\n    }\n  }\n\n  removeNote = () => {\n    this.props.removeNote(this.props.note._id);\n  };\n\n  setContent = e => {\n    this.props.note.setContent(e.target.value);\n  };\n\n  render() {\n    const { note } = this.props;\n    return (\n      <Fragment>\n        <Rebass.Divider\n          w={1}\n          borderColor=\"gray\"\n          my={3}\n          className=\"lighterGrayBorder\"\n        />\n        <Rebass.Flex\n          my={1}\n          mx={0}\n          justifyContent=\"space-between\"\n          alignItems=\"start\"\n        >\n          <Rebass.Box width={[1, 29 / 30]} mx={1}>\n            {this.props.isSelected ? (\n              <HighlightDiv>\n                <ContentEditable\n                  html={note.content}\n                  disabled={false}\n                  onChange={this.setContent}\n                  ref={this.contentEditableRef}\n                  className=\"contentEditable\"\n                />\n              </HighlightDiv>\n            ) : (\n              <ContentEditable\n                html={note.content}\n                disabled={false}\n                onChange={this.setContent}\n                ref={this.contentEditableRef}\n                className=\"contentEditable\"\n              />\n            )}\n          </Rebass.Box>\n          <Rebass.ButtonCircle\n            py={0}\n            px={2}\n            bg=\"white\"\n            color=\"black\"\n            onClick={this.removeNote}\n            children=\"×\"\n          />\n        </Rebass.Flex>\n      </Fragment>\n    );\n  }\n}\n\nexport default observer(Note);\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport * as Rebass from \"rebass\";\nimport Lib from \"../utils/lib.js\";\nimport Note from \"./Note.js\";\n\nclass NoteList extends Component {\n  addNote = () => {\n    this.props.noteStore.addNote(\n      Lib.saveableDateFormat(this.props.plannerDate)\n    );\n  };\n  removeNote = _id => {\n    this.props.noteStore.removeNote(_id);\n  };\n  render() {\n    const { plannerDate, listHeading, selectedItem } = this.props;\n    return (\n      <Rebass.Panel my={2}>\n        <Rebass.Panel.Header color=\"black\" borderBottom={0} py={2}>\n          <Rebass.Flex flexwrap=\"wrap\">\n            <Rebass.Box width={[1, 9 / 10]}>\n              <Rebass.Caps fontWeight=\"bold\" fontSize={2}>\n                {listHeading}\n              </Rebass.Caps>\n            </Rebass.Box>\n            <Rebass.Box width={[1, 1 / 10]} style={{ textAlign: \"right\" }}>\n              <Rebass.Button\n                children=\"Add\"\n                px={2}\n                py={1}\n                onClick={this.addNote}\n                bg=\"black\"\n              />\n            </Rebass.Box>\n          </Rebass.Flex>\n        </Rebass.Panel.Header>\n        <Rebass.Box p={1}>\n          <TransitionGroup>\n            {this.props.noteStore.notes.map(note => {\n              if (note.date === Lib.saveableDateFormat(plannerDate)) {\n                return (\n                  <CSSTransition key={note._id} timeout={200} classNames=\"fade\">\n                    <Note\n                      note={note}\n                      removeNote={this.removeNote}\n                      plannerDate={plannerDate}\n                      isSelected={selectedItem === note._id}\n                    />\n                  </CSSTransition>\n                );\n              } else {\n                return null;\n              }\n            })}\n          </TransitionGroup>\n        </Rebass.Box>\n      </Rebass.Panel>\n    );\n  }\n}\n\nexport default observer(NoteList);\n","import { observer } from \"mobx-react\";\nimport moment from \"moment\";\nimport React, { Component, Fragment } from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport * as Rebass from \"rebass\";\n\nclass Routine extends Component {\n  constructor(props) {\n    super(props);\n    this.contentEditableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.contentEditableRef.current.htmlEl.focus();\n  }\n\n  removeRoutine = () => {\n    this.props.removeRoutine(this.props.routine._id);\n  };\n\n  increaseFrequency = () => {\n    this.props.routine.increaseFrequency();\n  };\n\n  decreaseFrequency = () => {\n    this.props.routine.decreaseFrequency();\n  };\n\n  completionChange = i => {\n    this.props.routine.completionChange(this.props.plannerDate, i);\n  };\n\n  setTitle = e => {\n    this.props.routine.setTitle(e.target.value);\n  };\n\n  isCompletionChecked = index => {\n    const { routine, plannerDate } = this.props;\n    let result = false;\n    Object.entries(routine.completed).forEach(([key]) => {\n      let momentDate = moment(key);\n      if (routine.isMonthly) {\n        if (\n          momentDate.isSameOrAfter(moment(plannerDate).startOf(\"month\")) &&\n          momentDate.isSameOrBefore(moment(plannerDate).endOf(\"month\")) &&\n          routine.completed[key][index] === true\n        ) {\n          result = true;\n        }\n      } else {\n        if (\n          momentDate.isSameOrAfter(moment(plannerDate).startOf(\"week\")) &&\n          momentDate.isSameOrBefore(moment(plannerDate).endOf(\"week\")) &&\n          routine.completed[key][index] === true\n        ) {\n          result = true;\n        }\n      }\n    });\n    return result;\n  };\n\n  render() {\n    const { routine } = this.props;\n    return (\n      <Fragment>\n        <Rebass.Divider\n          w={1}\n          borderColor=\"gray\"\n          my={3}\n          className=\"lighterGrayBorder\"\n        />\n        <Rebass.Flex\n          justifyContent=\"space-between\"\n          my={1}\n          mx={0}\n          alignItems=\"start\"\n        >\n          <Rebass.Box width={[1, 19 / 20]} mx={1}>\n            <ContentEditable\n              html={routine.title}\n              disabled={false}\n              onChange={this.setTitle}\n              ref={this.contentEditableRef}\n              className=\"contentEditable\"\n            />\n          </Rebass.Box>\n          <Rebass.ButtonCircle\n            py={0}\n            px={2}\n            bg=\"white\"\n            color=\"black\"\n            onClick={this.removeRoutine}\n            children=\"×\"\n          />\n        </Rebass.Flex>\n        <Rebass.Flex my={1} alignItems=\"center\">\n          <Rebass.Box>\n            <Rebass.ButtonCircle\n              py={0}\n              px={1}\n              bg=\"white\"\n              color=\"black\"\n              onClick={this.decreaseFrequency}\n              children=\"–\"\n              mt={-1}\n            />\n            <Rebass.ButtonCircle\n              py={0}\n              px={2}\n              bg=\"white\"\n              color=\"black\"\n              onClick={this.increaseFrequency}\n              children=\"+\"\n              mt={-1}\n              mx={1}\n            />\n            {[...Array(routine.frequency)].map((x, i) => {\n              let checked = this.isCompletionChecked(i);\n              return (\n                <Rebass.Checkbox\n                  key={i}\n                  onChange={() => {\n                    this.completionChange(i);\n                  }}\n                  checked={checked}\n                />\n              );\n            })}\n          </Rebass.Box>\n        </Rebass.Flex>\n      </Fragment>\n    );\n  }\n}\n\nexport default observer(Routine);\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport * as Rebass from \"rebass\";\nimport Routine from \"./Routine.js\";\n\nclass RoutineList extends Component {\n  addRoutine = () => {\n    this.props.routineStore.addRoutine();\n  };\n  removeRoutine = _id => {\n    this.props.routineStore.removeRoutine(_id);\n  };\n  render() {\n    const { listHeading } = this.props;\n    return (\n      <Rebass.Panel my={2}>\n        <Rebass.Panel.Header color=\"black\" borderBottom={0} py={2}>\n          <Rebass.Flex flexwrap=\"wrap\">\n            <Rebass.Box width={[1, 9 / 10]}>\n              <Rebass.Caps fontWeight=\"bold\" fontSize={2}>\n                {listHeading}\n              </Rebass.Caps>\n            </Rebass.Box>\n            <Rebass.Box width={[1, 1 / 10]} style={{ textAlign: \"right\" }}>\n              <Rebass.Button\n                children=\"Add\"\n                px={2}\n                py={1}\n                onClick={this.addRoutine}\n                bg=\"black\"\n              />\n            </Rebass.Box>\n          </Rebass.Flex>\n        </Rebass.Panel.Header>\n        <Rebass.Box p={1}>\n          <TransitionGroup>\n            {this.props.routineStore.routines.map(routine => {\n              return (\n                <CSSTransition\n                  key={routine._id}\n                  timeout={200}\n                  classNames=\"fade\"\n                >\n                  <Routine\n                    routine={routine}\n                    removeRoutine={this.removeRoutine}\n                    plannerDate={this.props.plannerDate}\n                  />\n                </CSSTransition>\n              );\n            })}\n          </TransitionGroup>\n        </Rebass.Box>\n      </Rebass.Panel>\n    );\n  }\n}\n\nexport default observer(RoutineList);\n","import { observer } from \"mobx-react\";\nimport React, { Component, Fragment } from \"react\";\nimport ContentEditable from \"react-contenteditable\";\nimport * as Rebass from \"rebass\";\nimport Lib from \"../utils/lib.js\";\nimport HighlightDiv from \"./HighlightDiv.js\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.contentEditableRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const { isSelected, todo } = this.props;\n    if (isSelected || todo.content === \"\") {\n      this.contentEditableRef.current.htmlEl.focus();\n    }\n  }\n\n  removeTodo = () => {\n    this.props.removeTodo(this.props.todo._id);\n  };\n\n  setContent = e => {\n    this.props.todo.setContent(e.target.value);\n  };\n\n  toggleCompleted = () => {\n    this.props.todo.toggleCompleted();\n  };\n\n  removeDate = () => {\n    this.props.todo.removeDate();\n  };\n\n  setDate = () => {\n    this.props.todo.setDate(Lib.saveableDateFormat(this.props.plannerDate));\n  };\n\n  render() {\n    const { todo, isBacklog } = this.props;\n    return (\n      <Fragment>\n        <Rebass.Divider\n          w={1}\n          borderColor=\"gray\"\n          my={3}\n          className=\"lighterGrayBorder\"\n        />\n        <Rebass.Flex\n          my={1}\n          mx={0}\n          justifyContent=\"space-between\"\n          alignItems=\"end\"\n        >\n          {isBacklog ? (\n            <Rebass.ButtonCircle\n              py={0}\n              px={2}\n              mx={1}\n              bg=\"white\"\n              color=\"black\"\n              onClick={this.setDate}\n              children=\"←\"\n            />\n          ) : null}\n          <Rebass.Checkbox\n            onChange={this.toggleCompleted}\n            checked={todo.completed}\n          />\n          <Rebass.Box width={[1, 28 / 30]} mx={1}>\n            {this.props.isSelected ? (\n              <HighlightDiv>\n                <ContentEditable\n                  html={todo.content}\n                  disabled={false}\n                  onChange={this.setContent}\n                  ref={this.contentEditableRef}\n                  className=\"contentEditable\"\n                />\n              </HighlightDiv>\n            ) : (\n              <ContentEditable\n                html={todo.content}\n                disabled={false}\n                onChange={this.setContent}\n                ref={this.contentEditableRef}\n                className=\"contentEditable\"\n              />\n            )}\n          </Rebass.Box>\n          <Rebass.ButtonCircle\n            py={0}\n            px={2}\n            bg=\"white\"\n            color=\"black\"\n            onClick={this.removeTodo}\n            children=\"×\"\n          />\n          {!isBacklog && !todo.completed ? (\n            <Rebass.ButtonCircle\n              py={0}\n              px={2}\n              bg=\"white\"\n              color=\"black\"\n              onClick={this.removeDate}\n              children=\"→\"\n            />\n          ) : null}\n        </Rebass.Flex>\n      </Fragment>\n    );\n  }\n}\n\nexport default observer(Todo);\n","import { observer } from \"mobx-react\";\nimport React, { Component } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport * as Rebass from \"rebass\";\nimport Lib from \"../utils/lib.js\";\nimport Todo from \"./Todo.js\";\n\nclass TodoList extends Component {\n  addTodo = () => {\n    const { plannerDate, isBacklog } = this.props;\n    if (isBacklog) {\n      this.props.todoStore.addTodo(null);\n    } else {\n      this.props.todoStore.addTodo(Lib.saveableDateFormat(plannerDate));\n    }\n  };\n\n  removeTodo = _id => {\n    this.props.todoStore.removeTodo(_id);\n  };\n\n  render() {\n    const { plannerDate, isBacklog, listHeading, selectedItem } = this.props;\n    return (\n      <Rebass.Panel my={2}>\n        <Rebass.Panel.Header color=\"black\" borderBottom={0} py={2}>\n          <Rebass.Flex flexwrap=\"wrap\">\n            <Rebass.Box width={[1, 9 / 10]}>\n              <Rebass.Caps fontWeight=\"bold\" fontSize={2}>\n                {listHeading}\n              </Rebass.Caps>\n            </Rebass.Box>\n            <Rebass.Box width={[1, 1 / 10]} style={{ textAlign: \"right\" }}>\n              <Rebass.Button\n                children=\"Add\"\n                px={2}\n                py={1}\n                onClick={this.addTodo}\n                bg=\"black\"\n              />\n            </Rebass.Box>\n          </Rebass.Flex>\n        </Rebass.Panel.Header>\n        <Rebass.Box p={1}>\n          <TransitionGroup>\n            {this.props.todoStore.todos.map(todo => {\n              if (\n                (isBacklog && todo.date === null) ||\n                (!isBacklog &&\n                  todo.date === Lib.saveableDateFormat(plannerDate))\n              ) {\n                return (\n                  <CSSTransition key={todo._id} timeout={200} classNames=\"fade\">\n                    <Todo\n                      todo={todo}\n                      removeTodo={this.removeTodo}\n                      isBacklog={isBacklog}\n                      plannerDate={plannerDate}\n                      isSelected={selectedItem === todo._id}\n                    />\n                  </CSSTransition>\n                );\n              } else {\n                return null;\n              }\n            })}\n          </TransitionGroup>\n        </Rebass.Box>\n      </Rebass.Panel>\n    );\n  }\n}\n\nexport default observer(TodoList);\n","import { action, decorate, observable } from \"mobx\";\n\nclass Note {\n  constructor(id, date, content) {\n    this._id = id;\n    this.date = date;\n    this.content = content;\n  }\n\n  setContent(content) {\n    this.content = content;\n  }\n}\n\nexport default decorate(Note, {\n  _id: observable,\n  date: observable,\n  content: observable,\n  setContent: action\n});\n","import { autorun, toJS } from \"mobx\";\nimport localforage from \"localforage\";\nimport seedData from \"./seedData.js\";\n\nlet hydrate = (key, existingStore, store) => {\n  if (\n    key.startsWith(\"PLANNER_MONTHLY_ROUTINES\") ||\n    key.startsWith(\"PLANNER_WEEKLY_ROUTINES\")\n  ) {\n    store.setRoutineType(existingStore.routineType);\n    existingStore.routines.map(routine => {\n      return store.addRoutine(\n        routine._id,\n        routine.title,\n        routine.frequency,\n        routine.completed\n      );\n    });\n  }\n  if (key.startsWith(\"PLANNER_TODOS\")) {\n    existingStore.todos.map(todo => {\n      return store.addTodo(todo.date, todo._id, todo.content, todo.completed);\n    });\n  }\n  if (key.startsWith(\"PLANNER_NOTES\")) {\n    existingStore.notes.map(note => {\n      return store.addNote(note.date, note._id, note.content);\n    });\n  }\n};\n\nlocalforage.config({\n  name: \"Planner App\"\n});\n\nexport default function(key, _this) {\n  let firstRun = true;\n  let keyWithPrefix = \"PLANNER_\" + key;\n\n  autorun(() => {\n    if (firstRun) {\n      localforage\n        .getItem(keyWithPrefix)\n        .then(function(existingStore) {\n          if (existingStore) {\n            hydrate(keyWithPrefix, existingStore, _this);\n          } else {\n            seedData(keyWithPrefix, _this);\n          }\n        })\n        .catch(function(err) {});\n    }\n\n    localforage.setItem(keyWithPrefix, toJS(_this));\n  });\n\n  firstRun = false;\n}\n","import moment from \"moment\";\nimport Lib from \"./lib.js\";\n\nexport default function(key, store) {\n  const formattedTodayDate = Lib.saveableDateFormat(moment());\n  if (key.startsWith(\"PLANNER_MONTHLY_ROUTINES\")) {\n    store.setRoutineType(\"MONTHLY\");\n    store.addRoutine(Lib.generateID(\"MONTHLY\"), \"Review Finances\", 1, {\n      [`${formattedTodayDate}`]: [true]\n    });\n    store.addRoutine(Lib.generateID(\"MONTHLY\"), \"Date Night\");\n    store.addRoutine(Lib.generateID(\"MONTHLY\"), \"Pay credit card bill\");\n  }\n  if (key.startsWith(\"PLANNER_WEEKLY_ROUTINES\")) {\n    store.setRoutineType(\"WEEKLY\");\n    store.addRoutine(Lib.generateID(\"WEEKLY\"), \"Meditate\", 7, {\n      [`${formattedTodayDate}`]: [true, false, false, true, true, false, false]\n    });\n    store.addRoutine(Lib.generateID(\"WEEKLY\"), \"Workout\", 5, {\n      [`${formattedTodayDate}`]: [true, true, false, false, false]\n    });\n    store.addRoutine(Lib.generateID(\"WEEKLY\"), \"Write\", 3, {\n      [`${formattedTodayDate}`]: [false, false, false]\n    });\n  }\n  if (key.startsWith(\"PLANNER_TODOS\")) {\n    store.addTodo(\n      formattedTodayDate,\n      Lib.generateID(\"TODO\"),\n      \"With the arrow in the right of this box, move a todo to the backlog at the end of the day if you didn't get it done. Then, tomorrow, you can move it back to your day's plan, or choose a date on the calendar and move it there to plan for later.\",\n      false\n    );\n    store.addTodo(null, Lib.generateID(\"TODO\"), \"Clean out garage\", false);\n    store.addTodo(\n      null,\n      Lib.generateID(\"TODO\"),\n      \"Return stuff to target\",\n      false\n    );\n    store.addTodo(null, Lib.generateID(\"TODO\"), \"Clean rain gutters\", false);\n    store.addTodo(null, Lib.generateID(\"TODO\"), \"Put rent on autopay\", false);\n  }\n  if (key.startsWith(\"PLANNER_NOTES\")) {\n    store.addNote(\n      formattedTodayDate,\n      Lib.generateID(\"NOTE\"),\n      \"Hey, Hi! 👋🏼: All of this text is editable. Go ahead and click here. Use this space to track your daily notes. Think of it more like a notebook than a productivity application.\"\n    );\n    store.addNote(\n      formattedTodayDate,\n      Lib.generateID(\"NOTE\"),\n      \"For tasks you have to do routinely, add those tasks to Routines, then check the box when you complete it. Each week or month the boxes will empty again, waiting to be checked once more.\"\n    );\n    store.addNote(\n      formattedTodayDate,\n      Lib.generateID(\"NOTE\"),\n      \"I like to tag my notes with #tags #like #this. Then you can use the search box to quickly find notes about that tag. Stuff I have is #some-project-name and #spouse-gift-idea.\"\n    );\n  }\n}\n","import { action, computed, decorate, observable } from \"mobx\";\nimport Note from \"../models/Note.js\";\nimport autoSave from \"./../utils/autoSave.js\";\nimport Lib from \"./../utils/lib.js\";\n\nclass NoteStore {\n  constructor() {\n    this.notes = [];\n    autoSave(\"NOTES\", this);\n  }\n\n  addNote(date, id = Lib.generateID(\"NOTE\"), content = \"\") {\n    this.notes.push(new Note(id, date, content));\n  }\n\n  removeNote(_id) {\n    this.notes = this.notes.filter(note => {\n      return note._id !== _id;\n    });\n  }\n\n  get notesWithDates() {\n    return this.notes.filter(note => {\n      return note.date !== null;\n    });\n  }\n\n  get noteDates() {\n    return this.notesWithDates.map(note => {\n      return note.date;\n    });\n  }\n}\n\nexport default decorate(NoteStore, {\n  notes: observable,\n  addNote: action,\n  removeNote: action,\n  notesWithDates: computed,\n  noteDates: computed\n});\n","import { action, computed, decorate, observable } from \"mobx\";\nimport Lib from \"../utils/lib.js\";\n\nclass Routine {\n  constructor(id, title, frequency, completed) {\n    this._id = id;\n    this.title = title;\n    this.frequency = frequency;\n    this.completed = completed;\n  }\n\n  setTitle(title) {\n    this.title = title;\n  }\n\n  increaseFrequency() {\n    this.frequency += 1;\n    Object.entries(this.completed).forEach(([key]) =>\n      this.completed[key].push(undefined)\n    );\n  }\n\n  decreaseFrequency() {\n    if (this.frequency > 1) {\n      this.frequency -= 1;\n      Object.entries(this.completed).forEach(([key]) =>\n        this.completed[key].pop()\n      );\n    }\n  }\n\n  completionChange(momentDate, index) {\n    let formattedDateKey = Lib.saveableDateFormat(momentDate);\n    if (this.completed[formattedDateKey] === undefined) {\n      this.completed[formattedDateKey] = [...Array(this.frequency)];\n    }\n    this.completed[formattedDateKey][index] = !this.completed[formattedDateKey][\n      index\n    ];\n  }\n\n  get isMonthly() {\n    return this._id.startsWith(\"MONTHLY\");\n  }\n}\n\nexport default decorate(Routine, {\n  _id: observable,\n  title: observable,\n  frequency: observable,\n  completed: observable,\n  isMonthly: computed,\n  setTitle: action,\n  increaseFrequency: action,\n  decreaseFrequency: action,\n  completionChange: action\n});\n","import { action, decorate, observable } from \"mobx\";\nimport Routine from \"../models/Routine.js\";\nimport autoSave from \"./../utils/autoSave.js\";\nimport Lib from \"./../utils/lib.js\";\n\nclass RoutineStore {\n  constructor(routineType) {\n    this.routineType = routineType;\n    this.routines = [];\n    autoSave(routineType + \"_ROUTINES\", this);\n  }\n\n  setRoutineType(routineType) {\n    this.routineType = routineType;\n  }\n\n  addRoutine(\n    id = Lib.generateID(this.routineType),\n    title = \"\",\n    frequency = 2,\n    completed = {}\n  ) {\n    this.routines.push(new Routine(id, title, frequency, completed));\n  }\n\n  removeRoutine(_id) {\n    this.routines = this.routines.filter(routine => {\n      return routine._id !== _id;\n    });\n  }\n}\n\nexport default decorate(RoutineStore, {\n  routines: observable,\n  routineType: observable,\n  setRoutineType: action,\n  addRoutine: action,\n  removeRoutine: action\n});\n","import { action, decorate, observable } from \"mobx\";\n\nclass Todo {\n  constructor(id, date, content, completed) {\n    this._id = id;\n    this.date = date;\n    this.content = content;\n    this.completed = completed;\n  }\n\n  setContent(content) {\n    this.content = content;\n  }\n\n  toggleCompleted() {\n    this.completed = !this.completed;\n  }\n\n  setDate(date) {\n    this.date = date;\n  }\n\n  removeDate() {\n    this.date = null;\n  }\n}\n\nexport default decorate(Todo, {\n  _id: observable,\n  date: observable,\n  content: observable,\n  completed: observable,\n  setContent: action,\n  toggleCompleted: action,\n  setDate: action,\n  removeDate: action\n});\n","import { action, computed, decorate, observable } from \"mobx\";\nimport Todo from \"../models/Todo.js\";\nimport autoSave from \"./../utils/autoSave.js\";\nimport Lib from \"./../utils/lib.js\";\n\nclass TodoStore {\n  constructor() {\n    this.todos = [];\n    autoSave(\"TODOS\", this);\n  }\n\n  addTodo(date, id = Lib.generateID(\"TODO\"), content = \"\", completed = false) {\n    this.todos.push(new Todo(id, date, content, completed));\n  }\n\n  removeTodo(_id) {\n    this.todos = this.todos.filter(todo => {\n      return todo._id !== _id;\n    });\n  }\n\n  get todosWithDates() {\n    return this.todos.filter(todo => {\n      return todo.date !== null;\n    });\n  }\n\n  get todoDates() {\n    return this.todosWithDates.map(todo => {\n      return todo.date;\n    });\n  }\n}\n\nexport default decorate(TodoStore, {\n  todos: observable,\n  addTodo: action,\n  removeTodo: action,\n  todoDates: computed,\n  todosWithDates: computed\n});\n","import { observer } from \"mobx-react\";\nimport moment from \"moment\";\nimport \"normalize.css\";\nimport React, { Component } from \"react\";\nimport * as Rebass from \"rebass\";\nimport { injectGlobal } from \"styled-components\";\nimport NavigationBar from \"./components/NavigationBar.js\";\nimport NoteList from \"./components/NoteList.js\";\nimport RoutineList from \"./components/RoutineList.js\";\nimport TodoList from \"./components/TodoList.js\";\nimport NoteStore from \"./stores/NoteStore.js\";\nimport RoutineStore from \"./stores/RoutineStore.js\";\nimport TodoStore from \"./stores/TodoStore.js\";\nimport Lib from \"./utils/lib.js\";\n\ninjectGlobal`\n  * { box-sizing: border-box; }\n  body { margin: 0; }\n\n .todayLink {\n   color: #000;\n  }\n\n .lighterGrayBorder {\n   border-color: #fafafa !important;\n  }\n\n  .contentEditable {\n    outline: none;\n  }\n\n .fade-enter {\n    opacity: 0.01;\n  }\n  .fade-enter-active {\n    opacity: 1;\n    transition: opacity 200ms ease-in;\n  }\n  .fade-exit {\n    opacity: 1;\n  }\n  .fade-exit-active {\n    opacity: 0.01;\n    transition: opacity 200ms ease-in;\n  }\n\n  .searchDropdownContainer {\n    color: rgb(0, 0, 0);\n    z-index: 1;\n    position: absolute;\n    top: 2.0em;\n    right: 0px;\n    width: 25vw;\n    max-height: 90vh;\n    box-shadow: rgba(0, 0, 0, 0.25) 0px 5px 20px;\n    overflow: auto;\n    background: rgb(255, 255, 255);\n  }\n\n  .searchResult{\n    display: block;\n    color: inherit;\n    padding: 10px;\n    border-bottom: 1px solid rgb(238, 238, 238);\n    font: inherit;\n  }\n`;\n\nconst monthlyRoutineStore = new RoutineStore(\"MONTHLY\");\nconst weeklyRoutineStore = new RoutineStore(\"WEEKLY\");\nconst todoStore = new TodoStore();\nconst noteStore = new NoteStore();\n\nclass App extends Component {\n  render() {\n    const selectedItem =\n      this.props.location && this.props.location.search.split(\"=\")[1];\n    let inputDate = moment(this.props.plannerDate, Lib.dateFormat, true);\n    const plannerDate = inputDate.isValid() ? inputDate : moment();\n    const todayDate = `/${Lib.saveableDateFormat(moment())}`;\n    const prefixDate = plannerDate.format(\"dddd, MMMM Do\");\n    return (\n      <Rebass.Provider\n        theme={{\n          fonts: {\n            sans: \"Helvetica, sans-serif\"\n          }\n        }}\n      >\n        <NavigationBar\n          plannerDate={plannerDate}\n          todayDate={todayDate}\n          noteStore={noteStore}\n          todoStore={todoStore}\n        />\n        <Rebass.Flex flexWrap=\"wrap\" justifyContent=\"space-around\">\n          <Rebass.Box width={[1, 25 / 90]}>\n            <RoutineList\n              listHeading=\"Monthly Routines\"\n              routineStore={monthlyRoutineStore}\n              plannerDate={plannerDate}\n            />\n            <RoutineList\n              listHeading=\"Weekly Routines\"\n              routineStore={weeklyRoutineStore}\n              plannerDate={plannerDate}\n            />\n          </Rebass.Box>\n          <Rebass.Box width={[1, 40 / 90]}>\n            <TodoList\n              todoStore={todoStore}\n              plannerDate={plannerDate}\n              isBacklog={false}\n              listHeading={`TODOS for ${prefixDate} `}\n              selectedItem={selectedItem}\n            />\n            <NoteList\n              noteStore={noteStore}\n              plannerDate={plannerDate}\n              listHeading={`Notes for ${prefixDate} `}\n              selectedItem={selectedItem}\n            />\n          </Rebass.Box>\n          <Rebass.Box width={[1, 24 / 90]}>\n            <TodoList\n              todoStore={todoStore}\n              plannerDate={plannerDate}\n              isBacklog={true}\n              listHeading={`Backlogged TODOS`}\n            />\n          </Rebass.Box>\n        </Rebass.Flex>\n      </Rebass.Provider>\n    );\n  }\n}\n\nexport default observer(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Router, navigate } from \"@reach/router\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport moment from \"moment\";\n\nclass AppContainer extends Component {\n  componentDidMount = () => {\n    if (window.location.pathname === \"/\") {\n      navigate(`/${moment().format(\"YYYY-MM-DD\")}`);\n    }\n  };\n  render() {\n    return (\n      <Router>\n        <App path=\":plannerDate\" />\n      </Router>\n    );\n  }\n}\n\nReactDOM.render(<AppContainer />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}